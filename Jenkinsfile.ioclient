import groovy.json.JsonOutput
import groovy.json.JsonSlurper

// IO Environment
def ioPersonaType = 'master'
def ioConfigName = 'io-pwc-access-token'
def ioProjectName = 'PWC_INSECURE_BANK'
def ioWorkflowEngineVersion = '2022.12.0'
def ioServerURL = "https://io305.codedx.synopsys.com"
def ioRunAPI = "/api/ioiq/api/orchestration/runs/"

// SCM
def scmBranch = 'master'
def scmRepoName = 'insecure-bank-1'
// GitHub
def gitHubConfigName = 'github-pwc-access-token'
def gitHubOwner = 'irfasnps'

// AST - Coverity
// def covFilePath = '.io/jenkins-plugin/coverity-results.json'
// def covInstanceURL = 'https://coverity.synopsys.com'
// def coverityConfigName = 'coverity-poc'
// def coverityStream = 'VulnadoStream'
// def coverityTrialCredential = 'coverity-trial'

// AST - Sigma
// def sigmaPath = '/var/lib/jenkins/sigma-linux_x86_64'

// AST - Polaris
def polarisInstanceURL = 'https://sipse.polaris.synopsys.com/'
def polarisConfigName = 'polaris-pwc-access-token'
def polarisProjectName = 'PWC-INSECURE-BANK'
def polarisBranchName = 'main'
def polarisCredentialsId = 'polaris-pwc-access-token'

// AST - Black Duck
def blackDuckInstanceURL = 'https://poc305.blackduck.synopsys.com'
def blackDuckConfigName = 'blackduck-pwc-access-token'
def blackDuckProjectName = 'insecure-bank-1'
def blackDuckProjectVersion = '1.0'

// BTS Configuration
def jiraAssignee = 'neil'
def jiraConfigName = 'jira-poc'
def jiraIssueQuery = 'resolution=Unresolved'
def jiraProjectKey = 'WEBGOAT'
def jiraProjectName = 'WEBGOAT'

// Code Dx Configuration
def codeDxInstanceURL = 'https://poc305.codedx.synopsys.com/codedx'
def codeDxConfigName = 'codedx-pwc-access-token'
def codeDxCredentialsId = 'codedx-pwc-access-token'
def codeDxProjectId = '1'

// Notification Configuration
def msTeamsConfigName = 'msteams-poc'
def slackConfigName = 'slack-poc'

// IO Prescription Placeholders
def runId
def isSASTEnabled
def isSASTPlusMEnabled
def isSCAEnabled
def isDASTEnabled
def isDASTPlusMEnabled
def isImageScanEnabled
def isNetworkScanEnabled
def isCloudReviewEnabled
def isThreatModelEnabled
def isInfraReviewEnabled
def isASTEnabled
def breakBuild = false
def covUserName
def covPassword

pipeline {
    agent any

    stages {
        stage('Checkout') {
            environment {
                GITHUB_ACCESS_TOKEN = credentials("${gitHubConfigName}")
            }
            steps {
                script {
                    def pocURL = "https://${GITHUB_ACCESS_TOKEN}@github.com/${gitHubOwner}/${scmRepoName}"
                    git branch: scmBranch, url: pocURL
                }
            }
        }

        stage('Build') {
            steps {
                echo 'mvn clean compile -DskipTests -Dmaven.test.skip=true'
            }
        }

        // Get prescription from IO
        stage('Prescription') {
            environment {
                IO_ACCESS_TOKEN = credentials("${ioConfigName}")
                GITHUB_ACCESS_TOKEN = credentials("${gitHubConfigName}")
                CODE_DX_ACCESS_TOKEN = credentials("${codeDxCredentialsId}")
            }
            steps {
                script {
                    sh '/var/lib/jenkins/io -v'
                    echo "${IO_ACCESS_TOKEN} -- ${GITHUB_ACCESS_TOKEN} -- ${CODE_DX_ACCESS_TOKEN}"
                    // Determine prescription
                    sh "/var/lib/jenkins/io --stage io \
                    persona.type=${ioPersonaType}  \
                    io.server.token=${IO_ACCESS_TOKEN} \
                    io.server.url=${ioServerURL} \
                    project.name=${ioProjectName} \
                    project.application.name=${ioProjectName} \
                    scm.owner=${gitHubOwner} \
                    scm.repository.branch.name=${scmBranch} \
                    scm.repository.name=${scmRepoName} \
                    scm.type=github \
                    github.apiurl='https://api.github.com/repos' \
                    github.ownername=${gitHubOwner} \
                    github.repositoryname=${scmRepoName} \
                    github.token=${GITHUB_ACCESS_TOKEN} \
                    github.username=${gitHubOwner} \
                    codedx.apikey=${CODE_DX_ACCESS_TOKEN} \
                    codedx.instanceurl=${codeDxInstanceURL} \
                    codedx.projectid=${codeDxProjectId} \
                    "
                    echo "reached here!....."
                    // IO-IQ will write the prescription to io_state JSON
                    if (fileExists('io_state.json')) {
                        def prescriptionJSON = readJSON file: 'io_state.json'

                        //Pretty-print Prescription JSON
                        def prescriptionJSONFormat = JsonOutput.toJson(prescriptionJSON)
                        prettyJSON = JsonOutput.prettyPrint(prescriptionJSONFormat)
                        echo("${prettyJSON}")

                        // Use the run Id from IO IQ to get detailed message/explanation on prescription
                        // runId = prescriptionJSON.data.io.run.id
                        // echo "${runId}"
                        // def apiURL = ioServerURL + ioRunAPI + runId
                        // def res = sh(script: "curl --location --request GET  ${apiURL} --header 'Authorization: Bearer ${IO_ACCESS_TOKEN}'", returnStdout: true)

                        // def jsonSlurper = new JsonSlurper()
                        // def ioRunJSON = jsonSlurper.parseText(res)
                        // def ioRunJSONFormat = JsonOutput.toJson(ioRunJSON)
                        // def ioRunJSONPretty = JsonOutput.prettyPrint(ioRunJSONFormat)
                        // print("==================== IO-IQ Explanation ======================")
                        // echo("${ioRunJSONPretty}")
                        // print("==================== IO-IQ Explanation ======================")

                        // Update security flags based on prescription
                        isSASTEnabled = prescriptionJSON.data.prescription.security.activities.sast.enabled
                        //isSASTPlusMEnabled = prescriptionJSON.data.prescription.security.activities.sastPlusM.enabled
                        isSCAEnabled = prescriptionJSON.data.prescription.security.activities.sca.enabled
                        isDASTEnabled = prescriptionJSON.data.prescription.security.activities.dast.enabled
                        //isDASTPlusMEnabled = prescriptionJSON.data.prescription.security.activities.dastPlusM.enabled
                        isImageScanEnabled = prescriptionJSON.data.prescription.security.activities.imageScan.enabled
                        isNetworkScanEnabled = prescriptionJSON.data.prescription.security.activities.network.enabled
                        isCloudReviewEnabled = prescriptionJSON.data.prescription.security.activities.cloud.enabled
                        isThreatModelEnabled = prescriptionJSON.data.prescription.security.activities.threatmodel.enabled
                        isInfraReviewEnabled = prescriptionJSON.data.prescription.security.activities.infra.enabled

                        if(isSASTEnabled || isSCAEnabled || isDASTEnabled || isImageScanEnabled) {
                            isASTEnabled = true
                        } else {
                            isASTEnabled = false
                        }
                    } else {
                        error('IO prescription JSON not found.')
                    }
                }
            }
        }

        // stage('SAST-Sigma') {
        //     when {
        //         expression { isSASTEnabled }
        //     }
        //     steps {
        //         script {
        //             echo 'Running SAST using Sigma'
        //             //sh "/var/lib/jenkins/io --stage execution --state io_state.json sigma.executablepath=${sigmaPath}"
        //         }
        //     }
        // }

        stage('SAST-Polaris') {
            when {
                expression { isSASTEnabled }
            }
            environment {
                POLARIS_AUTH_TOKEN = credentials("${polarisCredentialsId}")
            }
            steps {
                script {
                    echo 'Running SAST using Polaris'
                    sh "/var/lib/jenkins/io --stage execution \
                        --state io_state.json \
                        polaris.authtoken=${POLARIS_AUTH_TOKEN} \
                        polaris.instanceurl=${polarisInstanceURL} \
                        polaris.projectname=${polarisProjectName} \
                        polaris.branchname=${polarisBranchName} \
                    "
                    def currentDate = sh(returnStdout: true, script: 'date +%Y-%m-%d').trim()
                    def prescriptionJSON = readJSON file: 'io_state.json'
                    prescriptionJSON.data.prescription.security.activities.sast.successful = true
                    prescriptionJSON.data.prescription.security.activities.sast.lastScanDate = currentDate
                    writeJSON file: 'io_state.json', json: prescriptionJSON
                }
            }
        }

        // SCA
        stage('SCA') {
            when {
                expression { isSCAEnabled }
            }
            environment {
                BLACK_DUCK_AUTH_TOKEN = credentials("${blackDuckConfigName}")
            }
            steps {
                script {
                    echo 'Running SCA using BlackDuck'
                    sh "/var/lib/jenkins/io --stage execution --state io_state.json \
                        blackduck.authtoken=${BLACK_DUCK_AUTH_TOKEN} \
                        blackduck.instanceurl=${blackDuckInstanceURL} \
                        blackduck.projectname=${blackDuckProjectName} \
                        blackduck.projectversion=${blackDuckProjectVersion} \
                    "
                    def currentDate = sh(returnStdout: true, script: 'date +%Y-%m-%d').trim()
                    def prescriptionJSON = readJSON file: 'io_state.json'
                    prescriptionJSON.data.prescription.security.activities.sca.successful = true
                    prescriptionJSON.data.prescription.security.activities.sca.lastScanDate = currentDate
                    writeJSON file: 'io_state.json', json: prescriptionJSON
                }
            }
        }

        // Manual SAST Stage
        stage('SAST+M') {
            when {
                expression { isSASTPlusMEnabled }
            }
            steps {
                input message: 'High risk score or significant code-change detected. Perform manual secure code-review.'
            }
        }

        // Run IO's Workflow Engine
        stage('Workflow') {
            steps {
                script {
                    echo 'Running IO Workflow'
                    sh "/var/lib/jenkins/io --stage workflow --state io_state.json \
                        workflow.engine.version=${ioWorkflowEngineVersion}' \
                    "
                }
            }
        }

        // Security Sign-Off Stage
        stage('Security') {
            steps {
                script {
                    if (fileExists('wf-output.json')) {
                        def wfJSON = readJSON file: 'wf-output.json'

                        // If the Workflow Output JSON has a lot of key-values; Jenkins throws a StackOverflow Exception
                        //  when trying to pretty-print the JSON
                        // def wfJSONFormat = JsonOutput.toJson(wfJSON)
                        // def wfJSONPretty = JsonOutput.prettyPrint(wfJSONFormat)
                        // print("======================== IO Workflow Engine Summary ==========================")
                        // print(wfJSONPretty)
                        // print("======================== IO Workflow Engine Summary ==========================")

                        breakBuild = wfJSON.breaker.status
                        print("========================== Build Breaker Status ============================")
                        print("Breaker Status: $breakBuild")
                        print("========================== Build Breaker Status ============================")

                        if (breakBuild) {
                            input message: 'Build-breaker criteria met.'
                            //error("Break build")
                        }
                    } else {
                        print('No output from the Workflow Engine. No sign-off required.')
                    }
                }
            }
        }
    }

    post {
        always {
            // Archive Results/Logs
            // archiveArtifacts artifacts: '**/*-results*.json', allowEmptyArchive: 'true'

            script {
                // Remove the state json file as it has sensitive information
                if (fileExists('io_state.json')) {
                    sh 'rm io_state.json'
                }
                if (fileExists('wf-output.json')) {
                    sh 'rm wf-output.json'
                }
            }
        }
    }
}